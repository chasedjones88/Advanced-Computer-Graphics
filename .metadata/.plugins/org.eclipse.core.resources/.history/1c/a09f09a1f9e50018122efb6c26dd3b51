package a3;

import graphicslib3D.*;

public class Camera {
	private Point3D localLoc = new Point3D(0,0,0);
	private Vector3D rotVector = new Vector3D(0,0,0);
	
	private Vector3D U = new Vector3D(1,0,0);
	private Vector3D V = new Vector3D(0,1,0);
	private Vector3D N = new Vector3D(0,0,1);
	
	public void Camera() {
	}
	
	public void setCameraPos(float x, float y, float z) {
		localLoc = new Point3D(x,y,z);
	}
	
	public void setCameraRot(Vector3D rotVector) {
		this.rotVector = rotVector;
	}
	public void rotate(float amt, Vector3D axis) {
		Matrix3D V_rot = new Matrix3D();
		if(axis.equals(new Vector3D(1,0,0))) {
			V_rot.rotate(amt,U);
			V = V.mult(V_rot);
			N = N.mult(V_rot);
		}
		else if(axis.equals(new Vector3D(0,1,0))) {
			V_rot.rotate(amt,V);
			U = U.mult(V_rot);
			N = N.mult(V_rot);
		}
		else if(axis.equals(new Vector3D(0,0,1))) {
			V_rot.rotate(amt,N);
			V = V.mult(V_rot);
			U = U.mult(V_rot);
		}
	}
	
	public void translateX(float amt) {
		Point3D U_mov = new Point3D(U.normalize());
		U_mov = U_mov.mult(amt);
		localLoc = localLoc.add(U_mov);
	}
	public void translateY(float amt) {
		Point3D V_mov = new Point3D(V.normalize());
		V_mov = V_mov.mult(amt);
		localLoc = localLoc.add(V_mov);
	}
	public void translateZ(float amt) {
		Point3D Z_mov = new Point3D(N.normalize());
		Z_mov = Z_mov.mult(amt);
		localLoc = localLoc.add(Z_mov);
	}
	
	public Matrix3D computeView() {
		Matrix3D retMat = new Matrix3D();
		
		retMat.setRow(0, U);
		retMat.setRow(1, V);
		retMat.setRow(2, N);
		retMat.setCol(3,  new Vector3D(
				-(new Vector3D(localLoc).dot(U)), 
				-(new Vector3D(localLoc).dot(V)), 
				-(new Vector3D(localLoc).dot(N))
				));
		
		return retMat.inverse();
	}
}
