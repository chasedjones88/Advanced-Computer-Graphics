package a3;

import graphicslib3D.*;

public class Camera {
	private Point3D localLoc = new Point3D(0,0,0);
	
	private Vector3D U = new Vector3D(1,0,0);
	private Vector3D V = new Vector3D(0,1,0);
	private Vector3D N = new Vector3D(0,0,1);
	
	public void Camera() {
	}
	
	public void setCameraPos(float x, float y, float z) {
		localLoc = new Point3D(x,y,z);
	}
	
	public void rotate(float amt, Vector3D axis) {
		if(axis.equals(new Vector3D(1,0,0))) {
			
			Matrix3D U_rot = new Matrix3D(); 
			U_rot.rotate(amt, U);
			V = V.mult(U_rot);
			N = N.mult(U_rot);
		}
		else if(axis.equals(new Vector3D(0,1,0))) {
			Matrix3D V_rot = new Matrix3D(); 
			V_rot.rotate(amt, V);
			U = U.mult(V_rot);
			N = N.mult(V_rot);
		}
		else if(axis.equals(new Vector3D(0,0,1))) {
			Matrix3D N_rot = new Matrix3D(); 
			N_rot.rotate(amt, N);
			V = V.mult(N_rot);
			U = U.mult(N_rot);
		}
	}
	
	public void lookat(Point3D target) {
		Point3D fwdpnt = new Point3D();
		fwdpnt = localLoc.minus(target);
		
		Vector3D fwd = new Vector3D(fwdpnt);
		fwd = fwd.normalize();
		
		Vector3D negfwd = new Vector3D();
		negfwd = new Vector3D(0,0,0).minus(fwd);
				
		Vector3D side = new Vector3D();
		side = negfwd.cross( new Vector3D(0,1,0));
		
		Vector3D upunnorm = new Vector3D();
		upunnorm = side.cross(negfwd);
		Vector3D up = upunnorm.normalize();
		
	}
	
	public void translateX(float amt) {
		Point3D U_mov = new Point3D(U.normalize());
		U_mov = U_mov.mult(amt);
		localLoc = localLoc.add(U_mov);
	}
	public void translateY(float amt) {
		Point3D V_mov = new Point3D(V.normalize());
		V_mov = V_mov.mult(amt);
		localLoc = localLoc.add(V_mov);
	}
	public void translateZ(float amt) {
		Point3D Z_mov = new Point3D(N.normalize());
		Z_mov = Z_mov.mult(amt);
		localLoc = localLoc.add(Z_mov);
	}
	
	public Matrix3D computeView() {
		Matrix3D retMat = new Matrix3D();
		retMat.translate(localLoc.getX(), localLoc.getY(), -localLoc.getZ());
		retMat.rotate(U.getX(), U.getY(), U.getZ());
		retMat.rotate(V.getX(), V.getY(), V.getZ());
		retMat.rotate(N.getX(), N.getY(), N.getZ());
		return retMat;
	}
}
